// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zllovesuki/b/app (interfaces: Backend,FastBackend,Removable,RemovableBackend,RemovableFastBackend)

// Package app is a generated GoMock package.
package app

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBackend) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBackendMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBackend)(nil).Close))
}

// Retrieve mocks base method.
func (m *MockBackend) Retrieve(arg0 context.Context, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockBackendMockRecorder) Retrieve(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockBackend)(nil).Retrieve), arg0, arg1)
}

// Save mocks base method.
func (m *MockBackend) Save(arg0 context.Context, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockBackendMockRecorder) Save(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBackend)(nil).Save), arg0, arg1, arg2)
}

// SaveTTL mocks base method.
func (m *MockBackend) SaveTTL(arg0 context.Context, arg1 string, arg2 []byte, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTTL", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTTL indicates an expected call of SaveTTL.
func (mr *MockBackendMockRecorder) SaveTTL(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTTL", reflect.TypeOf((*MockBackend)(nil).SaveTTL), arg0, arg1, arg2, arg3)
}

// MockFastBackend is a mock of FastBackend interface.
type MockFastBackend struct {
	ctrl     *gomock.Controller
	recorder *MockFastBackendMockRecorder
}

// MockFastBackendMockRecorder is the mock recorder for MockFastBackend.
type MockFastBackendMockRecorder struct {
	mock *MockFastBackend
}

// NewMockFastBackend creates a new mock instance.
func NewMockFastBackend(ctrl *gomock.Controller) *MockFastBackend {
	mock := &MockFastBackend{ctrl: ctrl}
	mock.recorder = &MockFastBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFastBackend) EXPECT() *MockFastBackendMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockFastBackend) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFastBackendMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFastBackend)(nil).Close))
}

// Retrieve mocks base method.
func (m *MockFastBackend) Retrieve(arg0 context.Context, arg1 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockFastBackendMockRecorder) Retrieve(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockFastBackend)(nil).Retrieve), arg0, arg1)
}

// Save mocks base method.
func (m *MockFastBackend) Save(arg0 context.Context, arg1 string, arg2 io.ReadCloser) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockFastBackendMockRecorder) Save(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockFastBackend)(nil).Save), arg0, arg1, arg2)
}

// SaveTTL mocks base method.
func (m *MockFastBackend) SaveTTL(arg0 context.Context, arg1 string, arg2 io.ReadCloser, arg3 time.Duration) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTTL", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveTTL indicates an expected call of SaveTTL.
func (mr *MockFastBackendMockRecorder) SaveTTL(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTTL", reflect.TypeOf((*MockFastBackend)(nil).SaveTTL), arg0, arg1, arg2, arg3)
}

// MockRemovable is a mock of Removable interface.
type MockRemovable struct {
	ctrl     *gomock.Controller
	recorder *MockRemovableMockRecorder
}

// MockRemovableMockRecorder is the mock recorder for MockRemovable.
type MockRemovableMockRecorder struct {
	mock *MockRemovable
}

// NewMockRemovable creates a new mock instance.
func NewMockRemovable(ctrl *gomock.Controller) *MockRemovable {
	mock := &MockRemovable{ctrl: ctrl}
	mock.recorder = &MockRemovableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemovable) EXPECT() *MockRemovableMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRemovable) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRemovableMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRemovable)(nil).Delete), arg0, arg1)
}

// MockRemovableBackend is a mock of RemovableBackend interface.
type MockRemovableBackend struct {
	ctrl     *gomock.Controller
	recorder *MockRemovableBackendMockRecorder
}

// MockRemovableBackendMockRecorder is the mock recorder for MockRemovableBackend.
type MockRemovableBackendMockRecorder struct {
	mock *MockRemovableBackend
}

// NewMockRemovableBackend creates a new mock instance.
func NewMockRemovableBackend(ctrl *gomock.Controller) *MockRemovableBackend {
	mock := &MockRemovableBackend{ctrl: ctrl}
	mock.recorder = &MockRemovableBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemovableBackend) EXPECT() *MockRemovableBackendMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRemovableBackend) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRemovableBackendMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRemovableBackend)(nil).Close))
}

// Delete mocks base method.
func (m *MockRemovableBackend) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRemovableBackendMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRemovableBackend)(nil).Delete), arg0, arg1)
}

// Retrieve mocks base method.
func (m *MockRemovableBackend) Retrieve(arg0 context.Context, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockRemovableBackendMockRecorder) Retrieve(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockRemovableBackend)(nil).Retrieve), arg0, arg1)
}

// Save mocks base method.
func (m *MockRemovableBackend) Save(arg0 context.Context, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRemovableBackendMockRecorder) Save(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRemovableBackend)(nil).Save), arg0, arg1, arg2)
}

// SaveTTL mocks base method.
func (m *MockRemovableBackend) SaveTTL(arg0 context.Context, arg1 string, arg2 []byte, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTTL", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTTL indicates an expected call of SaveTTL.
func (mr *MockRemovableBackendMockRecorder) SaveTTL(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTTL", reflect.TypeOf((*MockRemovableBackend)(nil).SaveTTL), arg0, arg1, arg2, arg3)
}

// MockRemovableFastBackend is a mock of RemovableFastBackend interface.
type MockRemovableFastBackend struct {
	ctrl     *gomock.Controller
	recorder *MockRemovableFastBackendMockRecorder
}

// MockRemovableFastBackendMockRecorder is the mock recorder for MockRemovableFastBackend.
type MockRemovableFastBackendMockRecorder struct {
	mock *MockRemovableFastBackend
}

// NewMockRemovableFastBackend creates a new mock instance.
func NewMockRemovableFastBackend(ctrl *gomock.Controller) *MockRemovableFastBackend {
	mock := &MockRemovableFastBackend{ctrl: ctrl}
	mock.recorder = &MockRemovableFastBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemovableFastBackend) EXPECT() *MockRemovableFastBackendMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRemovableFastBackend) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRemovableFastBackendMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRemovableFastBackend)(nil).Close))
}

// Delete mocks base method.
func (m *MockRemovableFastBackend) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRemovableFastBackendMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRemovableFastBackend)(nil).Delete), arg0, arg1)
}

// Retrieve mocks base method.
func (m *MockRemovableFastBackend) Retrieve(arg0 context.Context, arg1 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockRemovableFastBackendMockRecorder) Retrieve(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockRemovableFastBackend)(nil).Retrieve), arg0, arg1)
}

// Save mocks base method.
func (m *MockRemovableFastBackend) Save(arg0 context.Context, arg1 string, arg2 io.ReadCloser) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockRemovableFastBackendMockRecorder) Save(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRemovableFastBackend)(nil).Save), arg0, arg1, arg2)
}

// SaveTTL mocks base method.
func (m *MockRemovableFastBackend) SaveTTL(arg0 context.Context, arg1 string, arg2 io.ReadCloser, arg3 time.Duration) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTTL", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveTTL indicates an expected call of SaveTTL.
func (mr *MockRemovableFastBackendMockRecorder) SaveTTL(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTTL", reflect.TypeOf((*MockRemovableFastBackend)(nil).SaveTTL), arg0, arg1, arg2, arg3)
}
